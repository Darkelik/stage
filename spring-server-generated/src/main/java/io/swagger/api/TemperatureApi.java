/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ForecastResponse;
import io.swagger.model.HeaterState;
import io.swagger.model.ModelApiResponse;
import io.swagger.model.TemperatueZoneStatus;
import io.swagger.model.TemperatureSummary;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-19T08:00:08.890229128Z[GMT]")
@Validated
public interface TemperatureApi {

    @Operation(summary = "", description = "", tags={ "Environment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "the forecast", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ForecastResponse.class))) })
    @RequestMapping(value = "/temperature/forecast/{days}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ForecastResponse> getForecast(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("days") Integer days);


    @Operation(summary = "", description = "gets the state of the heater", tags={ "Environment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "heater state", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HeaterState.class))) })
    @RequestMapping(value = "/temperature/{zoneId}/heater",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<HeaterState> getHeaterState(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("zoneId") String zoneId);


    @Operation(summary = "", description = "", tags={ "Environment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Zone temperature", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TemperatueZoneStatus.class))) })
    @RequestMapping(value = "/temperature/{zoneId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TemperatueZoneStatus> getZoneTemperature(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("zoneId") String zoneId);


    @Operation(summary = "", description = "turns the heater on or off", tags={ "Environment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Status of the operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))) })
    @RequestMapping(value = "/temperature/{zoneId}/heater/{state}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> setHeaterState(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("zoneId") String zoneId, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema(allowableValues={ "false", "true" }
)) @PathVariable("state") String state);


    @Operation(summary = "", description = "", tags={ "Environment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TemperatureSummary.class))) })
    @RequestMapping(value = "/temperature",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TemperatureSummary> temperatureSummary();

}

