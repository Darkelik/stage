/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DeviceState;
import io.swagger.model.ModelApiResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-19T08:00:08.890229128Z[GMT]")
@Validated
public interface LightingApi {

    @Operation(summary = "", description = "", tags={ "Z-Wave" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceState.class))) })
    @RequestMapping(value = "/lighting/switches/{deviceId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DeviceState> getSwitchState(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("deviceId") String deviceId);


    @Operation(summary = "", description = "", tags={ "Z-Wave" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))) })
    @RequestMapping(value = "/lighting/dimmers/{deviceId}/{value}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> setDimmer(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("deviceId") String deviceId, @Min(0) @Max(100) @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema(allowableValues={ "0", "100" }, maximum="100"
)) @PathVariable("value") Integer value);


    @Operation(summary = "", description = "sets a dimmer to a specific value on a timer", tags={ "Z-Wave" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))) })
    @RequestMapping(value = "/lighting/dimmers/{deviceId}/{value}/timer/{timeunit}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> setDimmerTimer(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("deviceId") String deviceId, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("value") Integer value, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("timeunit") Integer timeunit, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema(allowableValues={ "seconds", "minutes", "milliseconds" }
, defaultValue="milliseconds")) @Valid @RequestParam(value = "units", required = false, defaultValue="milliseconds") String units);


    @Operation(summary = "", description = "", tags={ "Z-Wave" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))) })
    @RequestMapping(value = "/lighting/switches/{deviceId}/{value}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> setSwitch(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("deviceId") String deviceId, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema(allowableValues={ "true", "false" }
)) @PathVariable("value") String value);


    @Operation(summary = "", description = "sets a switch to a specific value on a timer", tags={ "Z-Wave" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))) })
    @RequestMapping(value = "/lighting/switches/{deviceId}/{value}/timer/{minutes}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> setSwitchTimer(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("deviceId") String deviceId, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema(allowableValues={ "true", "false" }
)) @PathVariable("value") String value, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("minutes") Integer minutes);

}

