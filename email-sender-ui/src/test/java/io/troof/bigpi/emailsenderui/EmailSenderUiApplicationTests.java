package io.troof.bigpi.emailsenderui;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import io.troof.bigpi.emailsenderui.controller.EmailController;
import io.troof.bigpi.emailsenderui.repository.EmailRepository;
import io.troof.bigpi.emailsenderui.repository.UserRepository;
import io.troof.bigpi.emailsenderui.resource.AutoEmail;
import io.troof.bigpi.emailsenderui.resource.Connection;
import io.troof.bigpi.emailsenderui.resource.EmailMessage;
import io.troof.bigpi.emailsenderui.resource.SmallConnection;
import io.troof.bigpi.emailsenderui.resource.User;
import io.troof.bigpi.emailsenderui.service.impl.EmailServiceImpl;
import io.troof.bigpi.emailsenderui.service.impl.UserServiceImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;




@SpringBootTest
class EmailSenderUiApplicationTests {

  private EmailServiceImpl emailService;
  @Mock
  private EmailRepository emailRepositoryMock;
  private UserServiceImpl userService;
  @Mock
  private UserRepository userRepositoryMock;
  private EmailController emailController;
  
  /** Initializer for all tests. */
  @BeforeEach
  public void setUp() {
    emailRepositoryMock = mock(EmailRepository.class);
    emailService = new EmailServiceImpl();
    emailService.setRepository(emailRepositoryMock);
     
    userRepositoryMock = mock(UserRepository.class);
    userService = new UserServiceImpl();
    userService.setRepository(userRepositoryMock);
      
    Connection co = new Connection("Frédéric Vaz", "fredericvaz2016@gmail.com",
         "aprjqviwqydnurgc", "smtp.gmail.com", 587, "smtp", "true", "true", "true");
    User user = new User(co);
    user.setId(1);
    userService.register(user);
    userService.setConnectedUser(user);
    
    emailService.initValues(user);
      
    emailController = new EmailController();
    emailController.setEmailService(emailService);
    emailController.setUserService(userService);
  }
  
  /** The test case, testing all functions at once. */
  @Test
  public void applicationTestCase() {
    // You may go to http://localhost:8080/swagger-ui.html after launching application to use it. 
     
    // TEST 1 : Registering a new user.
    // This function is used to register a new user into the database.
    // This function is at /register, in POST mode.

    // Registering is necessary to send e-mails using this application.
    // You need to fill in all required inputs.
    // For password, you need to provide an application password generated by your e-mail account.
  
    Connection connection = new Connection("test", "test@at.com", "pass",
         "at.com", 85, "smtp", "true", "true", "true");
    ResponseEntity<String> response1 = emailController.register(connection);
    
    assertEquals("User " + connection.getEmail() + " successfully registered.",
         response1.getBody());
  
    // TEST 2 : Connecting a registered user.
    // This function is used to connect a user already registered in the database.
    // This function is at /connect, in PUT mode.

    // E-mail and password are required to connect.
    // This will determine by whom is sent the e-mail.

    SmallConnection smallConnection = new SmallConnection("fredericvaz2016@gmail.com", 
          "aprjqviwqydnurgc");
    ResponseEntity<String> response2 = emailController.connect(smallConnection);
  
    // There is already a connected user according to the test initializer.
    assertEquals(smallConnection.getEmail() + " is already connected.", response2.getBody());    
 
    // TEST 3 : Sending a regular e-mail.
    // This function is used to send a regular e-mail to anyone.
    // This function is at /send, in POST mode.
    
    // You need to be connected to send an e-mail.
    // The required body is "to", "cc", "bcc", "subject", "message".
    // "cc" and "bcc" can be left empty by writing "".
      
    EmailMessage emailMessage = new EmailMessage("troof.test@gmail.com", "", "", "Sub", "Mes");
    ResponseEntity<String> response3 = emailController.sendEmail(emailMessage);
      
    assertEquals("Email successfully sent.", response3.getBody());
      
    // TEST 4 : Creating an auto e-mail.
    // This function is used to prepare a well structured e-mail in advance.
    // This function is at /create, in POST mode.
      
    // The structured e-mail will be stored in the database.
    // The body is the same as a regular e-mail, except it needs an extra field called "id".
    // The id must be a String.
      
    AutoEmail autoEmail = 
         new AutoEmail("test", "troof.test@gmail.com", "", "", "subject", "message");
    ResponseEntity<String> response4 = emailController.prepareAutoEmail(autoEmail);
    
    assertEquals("Auto email with id " + autoEmail.getId() + " successfully created.",
         response4.getBody());
 
    // TEST 5 : Check all created auto e-mails.
    // This function is used to check all prepared e-mails in the application.
    // This function is at /emails, in GET mode.
      
    // No particular parameters are required for this function.
      
    AutoEmail message1 = new AutoEmail("test1", "trof.test@gmail.com", "", "", "Sub 1", "Mes 1");
    AutoEmail message2 = new AutoEmail("test2", "trof.test@gmail.com", "", "", "Sub 2", "Mes 2");
    List<AutoEmail> emails = new ArrayList<>();
    emails.add(message1);
    emails.add(message2);
    when(emailService.getAllEmails()).thenReturn(emails);
    ResponseEntity<List<AutoEmail>> response5 = emailController.getAllEmails();
      
    assertEquals(HttpStatus.OK, response5.getStatusCode());
    assertEquals(2, response5.getBody().size());
    assertEquals(message1, response5.getBody().get(0));
    assertEquals(message2, response5.getBody().get(1));
      
    // TEST 6 : Check a particular auto e-mail.
    // This function is used to see a particular prepared e-mail in the database.
    // This function is at /emails/{id}, in GET mode.
      
    // The field "id" is required as a path variable. It's the id of the required e-mail.
      
    String emailId = "test";
    AutoEmail autoEmail2 = new AutoEmail();
    autoEmail2.setId(emailId);
    when(emailService.getEmailById(emailId)).thenReturn(Optional.of(autoEmail2));
    ResponseEntity<?> response6a = emailController.getEmailById(emailId);
      
    assertEquals(autoEmail2, response6a.getBody());
      
      
    ResponseEntity<?> response6b = emailController.getEmailById("fail");
      
    assertEquals("Auto email with id fail doesn't exist.", response6b.getBody());
    
    // TEST 7 : Sending an auto e-mail.
    // This function is used to send automatically a prepared e-mail.
    // This function is at /autosend, in POST mode.
      
    // Unlike sending a regular e-mail, this function requires only the "id" field.
      
    /* This test requires a String rather than an e-mail, so it's not properly done currently.
    
      ResponseEntity<?> response7 = emailController.sendAutoEmail("test");
      
      assertEquals("Auto email with id test doesn't exist.", response7.getBody());
      
    */
     
    // TEST 8 : Deleting an auto e-mail.
    // This function is used to delete a prepared e-mail in the database.
    // This function is at /email/{id}, in DELETE mode.
      
    // The field "id" is required as a path variable. It's the id of the required e-mail.
       
    String emailId2 = "test";
    AutoEmail autoEmail3 = new AutoEmail();
    autoEmail3.setId(emailId2);
    when(emailService.getEmailById(emailId2)).thenReturn(Optional.of(autoEmail3));
    ResponseEntity<String> response8a = emailController.deleteAutoEmail(emailId2);
      
    assertEquals(HttpStatus.OK, response8a.getStatusCode());
    assertEquals("Auto email with id " + emailId2 + " deleted successfully.", response8a.getBody());
    
      
    String emailId3 = "fail";
    when(emailService.getEmailById(emailId3)).thenReturn(Optional.empty());
    ResponseEntity<String> response8b = emailController.deleteAutoEmail(emailId3);
      
    assertEquals("Auto email with id " + emailId3 + " doesn't exist.", response8b.getBody());
    
    // TEST 9 : Disconnecting a user.
    // This function is used to disconnect a connected user.
    // This function is at /disconnect, in PUT mode.
      
  
    // No parameters are required. You can only disconnect if someone is connected.
      
    ResponseEntity<String> response9 = emailController.disconnect();
  
    assertEquals("fredericvaz2016@gmail.com successfully disconnected.", response9.getBody());
      
  }
}

